/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Hadoop.Hbase.Thrift2
{

  [Serializable]
  public partial class TScan : TBase
  {
    private byte[] _startRow;
    private byte[] _stopRow;
    private List<TColumn> _columns;
    private int _caching;
    private int _maxVersions;
    private TTimeRange _timeRange;

    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    public byte[] StopRow
    {
      get
      {
        return _stopRow;
      }
      set
      {
        __isset.stopRow = true;
        this._stopRow = value;
      }
    }

    public List<TColumn> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public int Caching
    {
      get
      {
        return _caching;
      }
      set
      {
        __isset.caching = true;
        this._caching = value;
      }
    }

    public int MaxVersions
    {
      get
      {
        return _maxVersions;
      }
      set
      {
        __isset.maxVersions = true;
        this._maxVersions = value;
      }
    }

    public TTimeRange TimeRange
    {
      get
      {
        return _timeRange;
      }
      set
      {
        __isset.timeRange = true;
        this._timeRange = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool startRow;
      public bool stopRow;
      public bool columns;
      public bool caching;
      public bool maxVersions;
      public bool timeRange;
    }

    public TScan() {
      this._maxVersions = 1;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              StartRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              StopRow = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<TColumn>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  TColumn _elem22 = new TColumn();
                  _elem22 = new TColumn();
                  _elem22.Read(iprot);
                  Columns.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Caching = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MaxVersions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              TimeRange = new TTimeRange();
              TimeRange.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TScan");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (StartRow != null && __isset.startRow) {
        field.Name = "startRow";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StartRow);
        oprot.WriteFieldEnd();
      }
      if (StopRow != null && __isset.stopRow) {
        field.Name = "stopRow";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(StopRow);
        oprot.WriteFieldEnd();
      }
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Columns.Count));
          foreach (TColumn _iter23 in Columns)
          {
            _iter23.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.caching) {
        field.Name = "caching";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Caching);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxVersions) {
        field.Name = "maxVersions";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxVersions);
        oprot.WriteFieldEnd();
      }
      if (TimeRange != null && __isset.timeRange) {
        field.Name = "timeRange";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        TimeRange.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TScan(");
      sb.Append("StartRow: ");
      sb.Append(StartRow);
      sb.Append(",StopRow: ");
      sb.Append(StopRow);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(",Caching: ");
      sb.Append(Caching);
      sb.Append(",MaxVersions: ");
      sb.Append(MaxVersions);
      sb.Append(",TimeRange: ");
      sb.Append(TimeRange== null ? "<null>" : TimeRange.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}

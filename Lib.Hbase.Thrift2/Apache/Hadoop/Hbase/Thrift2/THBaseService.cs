/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Hadoop.Hbase.Thrift2
{
  public class THBaseService {
    public interface Iface {
      bool exists(byte[] table, TGet get);
      TResult get(byte[] table, TGet get);
      List<TResult> getMultiple(byte[] table, List<TGet> gets);
      void put(byte[] table, TPut put);
      bool checkAndPut(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut put);
      void putMultiple(byte[] table, List<TPut> puts);
      void deleteSingle(byte[] table, TDelete deleteSingle);
      List<TDelete> deleteMultiple(byte[] table, List<TDelete> deletes);
      bool checkAndDelete(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete deleteSingle);
      TResult increment(byte[] table, TIncrement increment);
      int openScanner(byte[] table, TScan scan);
      List<TResult> getScannerRows(int scannerId, int numRows);
      void closeScanner(int scannerId);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public bool exists(byte[] table, TGet get)
      {
        send_exists(table, get);
        return recv_exists();
      }

      public void send_exists(byte[] table, TGet get)
      {
        oprot_.WriteMessageBegin(new TMessage("exists", TMessageType.Call, seqid_));
        exists_args args = new exists_args();
        args.Table = table;
        args.Get = get;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_exists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        exists_result result = new exists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exists failed: unknown result");
      }

      public TResult get(byte[] table, TGet get)
      {
        send_get(table, get);
        return recv_get();
      }

      public void send_get(byte[] table, TGet get)
      {
        oprot_.WriteMessageBegin(new TMessage("get", TMessageType.Call, seqid_));
        get_args args = new get_args();
        args.Table = table;
        args.Get = get;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TResult recv_get()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_result result = new get_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
      }

      public List<TResult> getMultiple(byte[] table, List<TGet> gets)
      {
        send_getMultiple(table, gets);
        return recv_getMultiple();
      }

      public void send_getMultiple(byte[] table, List<TGet> gets)
      {
        oprot_.WriteMessageBegin(new TMessage("getMultiple", TMessageType.Call, seqid_));
        getMultiple_args args = new getMultiple_args();
        args.Table = table;
        args.Gets = gets;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TResult> recv_getMultiple()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getMultiple_result result = new getMultiple_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMultiple failed: unknown result");
      }

      public void put(byte[] table, TPut put)
      {
        send_put(table, put);
        recv_put();
      }

      public void send_put(byte[] table, TPut put)
      {
        oprot_.WriteMessageBegin(new TMessage("put", TMessageType.Call, seqid_));
        put_args args = new put_args();
        args.Table = table;
        args.Put = put;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_put()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        put_result result = new put_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.Io;
        }
        return;
      }

      public bool checkAndPut(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut put)
      {
        send_checkAndPut(table, row, family, qualifier, value, put);
        return recv_checkAndPut();
      }

      public void send_checkAndPut(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut put)
      {
        oprot_.WriteMessageBegin(new TMessage("checkAndPut", TMessageType.Call, seqid_));
        checkAndPut_args args = new checkAndPut_args();
        args.Table = table;
        args.Row = row;
        args.Family = family;
        args.Qualifier = qualifier;
        args.Value = value;
        args.Put = put;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_checkAndPut()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkAndPut_result result = new checkAndPut_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndPut failed: unknown result");
      }

      public void putMultiple(byte[] table, List<TPut> puts)
      {
        send_putMultiple(table, puts);
        recv_putMultiple();
      }

      public void send_putMultiple(byte[] table, List<TPut> puts)
      {
        oprot_.WriteMessageBegin(new TMessage("putMultiple", TMessageType.Call, seqid_));
        putMultiple_args args = new putMultiple_args();
        args.Table = table;
        args.Puts = puts;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_putMultiple()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        putMultiple_result result = new putMultiple_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.Io;
        }
        return;
      }

      public void deleteSingle(byte[] table, TDelete deleteSingle)
      {
        send_deleteSingle(table, deleteSingle);
        recv_deleteSingle();
      }

      public void send_deleteSingle(byte[] table, TDelete deleteSingle)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteSingle", TMessageType.Call, seqid_));
        deleteSingle_args args = new deleteSingle_args();
        args.Table = table;
        args.DeleteSingle = deleteSingle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_deleteSingle()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteSingle_result result = new deleteSingle_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.Io;
        }
        return;
      }

      public List<TDelete> deleteMultiple(byte[] table, List<TDelete> deletes)
      {
        send_deleteMultiple(table, deletes);
        return recv_deleteMultiple();
      }

      public void send_deleteMultiple(byte[] table, List<TDelete> deletes)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteMultiple", TMessageType.Call, seqid_));
        deleteMultiple_args args = new deleteMultiple_args();
        args.Table = table;
        args.Deletes = deletes;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TDelete> recv_deleteMultiple()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteMultiple_result result = new deleteMultiple_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteMultiple failed: unknown result");
      }

      public bool checkAndDelete(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete deleteSingle)
      {
        send_checkAndDelete(table, row, family, qualifier, value, deleteSingle);
        return recv_checkAndDelete();
      }

      public void send_checkAndDelete(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete deleteSingle)
      {
        oprot_.WriteMessageBegin(new TMessage("checkAndDelete", TMessageType.Call, seqid_));
        checkAndDelete_args args = new checkAndDelete_args();
        args.Table = table;
        args.Row = row;
        args.Family = family;
        args.Qualifier = qualifier;
        args.Value = value;
        args.DeleteSingle = deleteSingle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_checkAndDelete()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkAndDelete_result result = new checkAndDelete_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndDelete failed: unknown result");
      }

      public TResult increment(byte[] table, TIncrement increment)
      {
        send_increment(table, increment);
        return recv_increment();
      }

      public void send_increment(byte[] table, TIncrement increment)
      {
        oprot_.WriteMessageBegin(new TMessage("increment", TMessageType.Call, seqid_));
        increment_args args = new increment_args();
        args.Table = table;
        args.Increment = increment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TResult recv_increment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        increment_result result = new increment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "increment failed: unknown result");
      }

      public int openScanner(byte[] table, TScan scan)
      {
        send_openScanner(table, scan);
        return recv_openScanner();
      }

      public void send_openScanner(byte[] table, TScan scan)
      {
        oprot_.WriteMessageBegin(new TMessage("openScanner", TMessageType.Call, seqid_));
        openScanner_args args = new openScanner_args();
        args.Table = table;
        args.Scan = scan;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_openScanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        openScanner_result result = new openScanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openScanner failed: unknown result");
      }

      public List<TResult> getScannerRows(int scannerId, int numRows)
      {
        send_getScannerRows(scannerId, numRows);
        return recv_getScannerRows();
      }

      public void send_getScannerRows(int scannerId, int numRows)
      {
        oprot_.WriteMessageBegin(new TMessage("getScannerRows", TMessageType.Call, seqid_));
        getScannerRows_args args = new getScannerRows_args();
        args.ScannerId = scannerId;
        args.NumRows = numRows;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TResult> recv_getScannerRows()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getScannerRows_result result = new getScannerRows_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.io) {
          throw result.Io;
        }
        if (result.__isset.ia) {
          throw result.Ia;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getScannerRows failed: unknown result");
      }

      public void closeScanner(int scannerId)
      {
        send_closeScanner(scannerId);
        recv_closeScanner();
      }

      public void send_closeScanner(int scannerId)
      {
        oprot_.WriteMessageBegin(new TMessage("closeScanner", TMessageType.Call, seqid_));
        closeScanner_args args = new closeScanner_args();
        args.ScannerId = scannerId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_closeScanner()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        closeScanner_result result = new closeScanner_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.Io;
        }
        if (result.__isset.ia) {
          throw result.Ia;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["exists"] = exists_Process;
        processMap_["get"] = get_Process;
        processMap_["getMultiple"] = getMultiple_Process;
        processMap_["put"] = put_Process;
        processMap_["checkAndPut"] = checkAndPut_Process;
        processMap_["putMultiple"] = putMultiple_Process;
        processMap_["deleteSingle"] = deleteSingle_Process;
        processMap_["deleteMultiple"] = deleteMultiple_Process;
        processMap_["checkAndDelete"] = checkAndDelete_Process;
        processMap_["increment"] = increment_Process;
        processMap_["openScanner"] = openScanner_Process;
        processMap_["getScannerRows"] = getScannerRows_Process;
        processMap_["closeScanner"] = closeScanner_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void exists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        exists_args args = new exists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        exists_result result = new exists_result();
        try {
          result.Success = iface_.exists(args.Table, args.Get);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("exists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_args args = new get_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_result result = new get_result();
        try {
          result.Success = iface_.get(args.Table, args.Get);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("get", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getMultiple_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getMultiple_args args = new getMultiple_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getMultiple_result result = new getMultiple_result();
        try {
          result.Success = iface_.getMultiple(args.Table, args.Gets);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("getMultiple", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void put_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        put_args args = new put_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        put_result result = new put_result();
        try {
          iface_.put(args.Table, args.Put);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("put", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkAndPut_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkAndPut_args args = new checkAndPut_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkAndPut_result result = new checkAndPut_result();
        try {
          result.Success = iface_.checkAndPut(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Put);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("checkAndPut", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void putMultiple_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        putMultiple_args args = new putMultiple_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        putMultiple_result result = new putMultiple_result();
        try {
          iface_.putMultiple(args.Table, args.Puts);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("putMultiple", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteSingle_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteSingle_args args = new deleteSingle_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteSingle_result result = new deleteSingle_result();
        try {
          iface_.deleteSingle(args.Table, args.DeleteSingle);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSingle", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteMultiple_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteMultiple_args args = new deleteMultiple_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteMultiple_result result = new deleteMultiple_result();
        try {
          result.Success = iface_.deleteMultiple(args.Table, args.Deletes);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("deleteMultiple", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkAndDelete_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkAndDelete_args args = new checkAndDelete_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkAndDelete_result result = new checkAndDelete_result();
        try {
          result.Success = iface_.checkAndDelete(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.DeleteSingle);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("checkAndDelete", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void increment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        increment_args args = new increment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        increment_result result = new increment_result();
        try {
          result.Success = iface_.increment(args.Table, args.Increment);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("increment", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void openScanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        openScanner_args args = new openScanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        openScanner_result result = new openScanner_result();
        try {
          result.Success = iface_.openScanner(args.Table, args.Scan);
        } catch (TIOError io) {
          result.Io = io;
        }
        oprot.WriteMessageBegin(new TMessage("openScanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getScannerRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getScannerRows_args args = new getScannerRows_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getScannerRows_result result = new getScannerRows_result();
        try {
          result.Success = iface_.getScannerRows(args.ScannerId, args.NumRows);
        } catch (TIOError io) {
          result.Io = io;
        } catch (TIllegalArgument ia) {
          result.Ia = ia;
        }
        oprot.WriteMessageBegin(new TMessage("getScannerRows", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void closeScanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        closeScanner_args args = new closeScanner_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        closeScanner_result result = new closeScanner_result();
        try {
          iface_.closeScanner(args.ScannerId);
        } catch (TIOError io) {
          result.Io = io;
        } catch (TIllegalArgument ia) {
          result.Ia = ia;
        }
        oprot.WriteMessageBegin(new TMessage("closeScanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class exists_args : TBase
    {
      private byte[] _table;
      private TGet _get;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public TGet Get
      {
        get
        {
          return _get;
        }
        set
        {
          __isset.get = true;
          this._get = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool get;
      }

      public exists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Get = new TGet();
                Get.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("exists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Get != null && __isset.get) {
          field.Name = "get";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Get.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("exists_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Get: ");
        sb.Append(Get== null ? "<null>" : Get.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class exists_result : TBase
    {
      private bool _success;
      private TIOError _io;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public exists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("exists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("exists_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_args : TBase
    {
      private byte[] _table;
      private TGet _get;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public TGet Get
      {
        get
        {
          return _get;
        }
        set
        {
          __isset.get = true;
          this._get = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool get;
      }

      public get_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Get = new TGet();
                Get.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Get != null && __isset.get) {
          field.Name = "get";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Get.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Get: ");
        sb.Append(Get== null ? "<null>" : Get.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_result : TBase
    {
      private TResult _success;
      private TIOError _io;

      public TResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public get_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getMultiple_args : TBase
    {
      private byte[] _table;
      private List<TGet> _gets;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public List<TGet> Gets
      {
        get
        {
          return _gets;
        }
        set
        {
          __isset.gets = true;
          this._gets = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool gets;
      }

      public getMultiple_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Gets = new List<TGet>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    TGet _elem26 = new TGet();
                    _elem26 = new TGet();
                    _elem26.Read(iprot);
                    Gets.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMultiple_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Gets != null && __isset.gets) {
          field.Name = "gets";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Gets.Count));
            foreach (TGet _iter27 in Gets)
            {
              _iter27.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMultiple_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Gets: ");
        sb.Append(Gets);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getMultiple_result : TBase
    {
      private List<TResult> _success;
      private TIOError _io;

      public List<TResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public getMultiple_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TResult>();
                  TList _list28 = iprot.ReadListBegin();
                  for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    TResult _elem30 = new TResult();
                    _elem30 = new TResult();
                    _elem30.Read(iprot);
                    Success.Add(_elem30);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getMultiple_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TResult _iter31 in Success)
              {
                _iter31.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getMultiple_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class put_args : TBase
    {
      private byte[] _table;
      private TPut _put;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public TPut Put
      {
        get
        {
          return _put;
        }
        set
        {
          __isset.put = true;
          this._put = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool put;
      }

      public put_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Put = new TPut();
                Put.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("put_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Put != null && __isset.put) {
          field.Name = "put";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Put.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("put_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Put: ");
        sb.Append(Put== null ? "<null>" : Put.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class put_result : TBase
    {
      private TIOError _io;

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool io;
      }

      public put_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("put_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("put_result(");
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class checkAndPut_args : TBase
    {
      private byte[] _table;
      private byte[] _row;
      private byte[] _family;
      private byte[] _qualifier;
      private byte[] _value;
      private TPut _put;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public byte[] Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }

      public byte[] Family
      {
        get
        {
          return _family;
        }
        set
        {
          __isset.family = true;
          this._family = value;
        }
      }

      public byte[] Qualifier
      {
        get
        {
          return _qualifier;
        }
        set
        {
          __isset.qualifier = true;
          this._qualifier = value;
        }
      }

      public byte[] Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }

      public TPut Put
      {
        get
        {
          return _put;
        }
        set
        {
          __isset.put = true;
          this._put = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool row;
        public bool family;
        public bool qualifier;
        public bool value;
        public bool put;
      }

      public checkAndPut_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Row = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Family = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Qualifier = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Value = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Put = new TPut();
                Put.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkAndPut_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Row != null && __isset.row) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Row);
          oprot.WriteFieldEnd();
        }
        if (Family != null && __isset.family) {
          field.Name = "family";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Family);
          oprot.WriteFieldEnd();
        }
        if (Qualifier != null && __isset.qualifier) {
          field.Name = "qualifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Qualifier);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Value);
          oprot.WriteFieldEnd();
        }
        if (Put != null && __isset.put) {
          field.Name = "put";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Put.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkAndPut_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Row: ");
        sb.Append(Row);
        sb.Append(",Family: ");
        sb.Append(Family);
        sb.Append(",Qualifier: ");
        sb.Append(Qualifier);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(",Put: ");
        sb.Append(Put== null ? "<null>" : Put.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class checkAndPut_result : TBase
    {
      private bool _success;
      private TIOError _io;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public checkAndPut_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkAndPut_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkAndPut_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class putMultiple_args : TBase
    {
      private byte[] _table;
      private List<TPut> _puts;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public List<TPut> Puts
      {
        get
        {
          return _puts;
        }
        set
        {
          __isset.puts = true;
          this._puts = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool puts;
      }

      public putMultiple_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Puts = new List<TPut>();
                  TList _list32 = iprot.ReadListBegin();
                  for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    TPut _elem34 = new TPut();
                    _elem34 = new TPut();
                    _elem34.Read(iprot);
                    Puts.Add(_elem34);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("putMultiple_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Puts != null && __isset.puts) {
          field.Name = "puts";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Puts.Count));
            foreach (TPut _iter35 in Puts)
            {
              _iter35.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("putMultiple_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Puts: ");
        sb.Append(Puts);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class putMultiple_result : TBase
    {
      private TIOError _io;

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool io;
      }

      public putMultiple_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("putMultiple_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("putMultiple_result(");
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteSingle_args : TBase
    {
      private byte[] _table;
      private TDelete _deleteSingle;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public TDelete DeleteSingle
      {
        get
        {
          return _deleteSingle;
        }
        set
        {
          __isset.deleteSingle = true;
          this._deleteSingle = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool deleteSingle;
      }

      public deleteSingle_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                DeleteSingle = new TDelete();
                DeleteSingle.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSingle_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (DeleteSingle != null && __isset.deleteSingle) {
          field.Name = "deleteSingle";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          DeleteSingle.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSingle_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",DeleteSingle: ");
        sb.Append(DeleteSingle== null ? "<null>" : DeleteSingle.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteSingle_result : TBase
    {
      private TIOError _io;

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool io;
      }

      public deleteSingle_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteSingle_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteSingle_result(");
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteMultiple_args : TBase
    {
      private byte[] _table;
      private List<TDelete> _deletes;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public List<TDelete> Deletes
      {
        get
        {
          return _deletes;
        }
        set
        {
          __isset.deletes = true;
          this._deletes = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool deletes;
      }

      public deleteMultiple_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Deletes = new List<TDelete>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    TDelete _elem38 = new TDelete();
                    _elem38 = new TDelete();
                    _elem38.Read(iprot);
                    Deletes.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteMultiple_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Deletes != null && __isset.deletes) {
          field.Name = "deletes";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Deletes.Count));
            foreach (TDelete _iter39 in Deletes)
            {
              _iter39.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteMultiple_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Deletes: ");
        sb.Append(Deletes);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class deleteMultiple_result : TBase
    {
      private List<TDelete> _success;
      private TIOError _io;

      public List<TDelete> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public deleteMultiple_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TDelete>();
                  TList _list40 = iprot.ReadListBegin();
                  for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                  {
                    TDelete _elem42 = new TDelete();
                    _elem42 = new TDelete();
                    _elem42.Read(iprot);
                    Success.Add(_elem42);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteMultiple_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TDelete _iter43 in Success)
              {
                _iter43.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteMultiple_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class checkAndDelete_args : TBase
    {
      private byte[] _table;
      private byte[] _row;
      private byte[] _family;
      private byte[] _qualifier;
      private byte[] _value;
      private TDelete _deleteSingle;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public byte[] Row
      {
        get
        {
          return _row;
        }
        set
        {
          __isset.row = true;
          this._row = value;
        }
      }

      public byte[] Family
      {
        get
        {
          return _family;
        }
        set
        {
          __isset.family = true;
          this._family = value;
        }
      }

      public byte[] Qualifier
      {
        get
        {
          return _qualifier;
        }
        set
        {
          __isset.qualifier = true;
          this._qualifier = value;
        }
      }

      public byte[] Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }

      public TDelete DeleteSingle
      {
        get
        {
          return _deleteSingle;
        }
        set
        {
          __isset.deleteSingle = true;
          this._deleteSingle = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool row;
        public bool family;
        public bool qualifier;
        public bool value;
        public bool deleteSingle;
      }

      public checkAndDelete_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Row = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Family = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Qualifier = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Value = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeleteSingle = new TDelete();
                DeleteSingle.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkAndDelete_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Row != null && __isset.row) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Row);
          oprot.WriteFieldEnd();
        }
        if (Family != null && __isset.family) {
          field.Name = "family";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Family);
          oprot.WriteFieldEnd();
        }
        if (Qualifier != null && __isset.qualifier) {
          field.Name = "qualifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Qualifier);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Value);
          oprot.WriteFieldEnd();
        }
        if (DeleteSingle != null && __isset.deleteSingle) {
          field.Name = "deleteSingle";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeleteSingle.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkAndDelete_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Row: ");
        sb.Append(Row);
        sb.Append(",Family: ");
        sb.Append(Family);
        sb.Append(",Qualifier: ");
        sb.Append(Qualifier);
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(",DeleteSingle: ");
        sb.Append(DeleteSingle== null ? "<null>" : DeleteSingle.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class checkAndDelete_result : TBase
    {
      private bool _success;
      private TIOError _io;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public checkAndDelete_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("checkAndDelete_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("checkAndDelete_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class increment_args : TBase
    {
      private byte[] _table;
      private TIncrement _increment;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public TIncrement Increment
      {
        get
        {
          return _increment;
        }
        set
        {
          __isset.increment = true;
          this._increment = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool increment;
      }

      public increment_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Increment = new TIncrement();
                Increment.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("increment_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Increment != null && __isset.increment) {
          field.Name = "increment";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Increment.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("increment_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Increment: ");
        sb.Append(Increment== null ? "<null>" : Increment.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class increment_result : TBase
    {
      private TResult _success;
      private TIOError _io;

      public TResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public increment_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("increment_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("increment_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class openScanner_args : TBase
    {
      private byte[] _table;
      private TScan _scan;

      public byte[] Table
      {
        get
        {
          return _table;
        }
        set
        {
          __isset.table = true;
          this._table = value;
        }
      }

      public TScan Scan
      {
        get
        {
          return _scan;
        }
        set
        {
          __isset.scan = true;
          this._scan = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool table;
        public bool scan;
      }

      public openScanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Table = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Scan = new TScan();
                Scan.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("openScanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Table != null && __isset.table) {
          field.Name = "table";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Table);
          oprot.WriteFieldEnd();
        }
        if (Scan != null && __isset.scan) {
          field.Name = "scan";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Scan.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("openScanner_args(");
        sb.Append("Table: ");
        sb.Append(Table);
        sb.Append(",Scan: ");
        sb.Append(Scan== null ? "<null>" : Scan.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class openScanner_result : TBase
    {
      private int _success;
      private TIOError _io;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
      }

      public openScanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("openScanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("openScanner_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getScannerRows_args : TBase
    {
      private int _scannerId;
      private int _numRows;

      public int ScannerId
      {
        get
        {
          return _scannerId;
        }
        set
        {
          __isset.scannerId = true;
          this._scannerId = value;
        }
      }

      public int NumRows
      {
        get
        {
          return _numRows;
        }
        set
        {
          __isset.numRows = true;
          this._numRows = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scannerId;
        public bool numRows;
      }

      public getScannerRows_args() {
        this._numRows = 1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ScannerId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NumRows = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getScannerRows_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scannerId) {
          field.Name = "scannerId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ScannerId);
          oprot.WriteFieldEnd();
        }
        if (__isset.numRows) {
          field.Name = "numRows";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NumRows);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getScannerRows_args(");
        sb.Append("ScannerId: ");
        sb.Append(ScannerId);
        sb.Append(",NumRows: ");
        sb.Append(NumRows);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class getScannerRows_result : TBase
    {
      private List<TResult> _success;
      private TIOError _io;
      private TIllegalArgument _ia;

      public List<TResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }

      public TIllegalArgument Ia
      {
        get
        {
          return _ia;
        }
        set
        {
          __isset.ia = true;
          this._ia = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool io;
        public bool ia;
      }

      public getScannerRows_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TResult>();
                  TList _list44 = iprot.ReadListBegin();
                  for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    TResult _elem46 = new TResult();
                    _elem46 = new TResult();
                    _elem46.Read(iprot);
                    Success.Add(_elem46);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ia = new TIllegalArgument();
                Ia.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getScannerRows_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TResult _iter47 in Success)
              {
                _iter47.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (Ia != null) {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getScannerRows_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(",Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class closeScanner_args : TBase
    {
      private int _scannerId;

      public int ScannerId
      {
        get
        {
          return _scannerId;
        }
        set
        {
          __isset.scannerId = true;
          this._scannerId = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool scannerId;
      }

      public closeScanner_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ScannerId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("closeScanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.scannerId) {
          field.Name = "scannerId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ScannerId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("closeScanner_args(");
        sb.Append("ScannerId: ");
        sb.Append(ScannerId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class closeScanner_result : TBase
    {
      private TIOError _io;
      private TIllegalArgument _ia;

      public TIOError Io
      {
        get
        {
          return _io;
        }
        set
        {
          __isset.io = true;
          this._io = value;
        }
      }

      public TIllegalArgument Ia
      {
        get
        {
          return _ia;
        }
        set
        {
          __isset.ia = true;
          this._ia = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool io;
        public bool ia;
      }

      public closeScanner_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Io = new TIOError();
                Io.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ia = new TIllegalArgument();
                Ia.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("closeScanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (Io != null) {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (Ia != null) {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("closeScanner_result(");
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
        sb.Append(",Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
